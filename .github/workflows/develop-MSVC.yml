name: Sensing dev installer Build, Test

on:
  push:
    branches:
      - '*'  # This will run the build and test jobs for every push on all branches

  pull_request:
    branches:
      - '*'  # This will run the build and test jobs for pull requests to all branches


jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
         python-version: "3.11.4"

      - name: Install Conan and PyYAML via pip
        run: |
         python -m pip install conan
         python -m pip install PyYAML

      - name: Disable Perl (remove from PATH)
        run: choco uninstall strawberryperl -n

      - name: Install WiX Toolset
        run: choco install wixtoolset -y

      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          submodules: recursive

      - name: Create and enter the build directory
        run: |
          cd installer
          mkdir build
          cd build

      - name: Run CMake
        working-directory: installer/build
        run: cmake -G "Visual Studio 17 2022" -A x64 ../

      - name: Build with CMake
        working-directory: installer/build
        run: cmake --build . --config Release

      - name: Generate liscence files
        working-directory: installer/build
        run: cmake -G "Visual Studio 17 2022" -A x64 ../ 

      - name: Package with CPack WIX
        working-directory: installer/build
        run: cpack -G "WIX"

      - name: Upload artifacts MSI
        uses: actions/upload-artifact@v2
        with:
          name: sensing-dev-installer-msi
          path: |
            installer/build/*.msi

      - name: Create package zip
        working-directory: installer/build
        run: cpack -G "ZIP"

      - name: Create package without opencv
        working-directory: installer/build
        run:  cmake -G "Visual Studio 17 2022" -A x64 ../ -DOPENCV_ACTION="use_existing"

      - name: Create package msi
        working-directory: installer/build
        run: cpack -G "WIX"

      - name: Create package zip
        working-directory: installer/build
        run: cpack -G "ZIP"

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: sensing-dev-installer-zip
          path: |
            installer/build/*.zip

      
            
  test-script:
    needs: build
    strategy:
      matrix:
        version: ["v24.01.02"]
        options: ["-user $env:USERNAME", "-user $env:USERNAME -InstallOpenCV", "", "-InstallOpenCV"] 
        exclude:
          - version: "v23.11.01"
            options: ["-user $env:USERNAME -InstallOpenCV", "-InstallOpenCV"]

    runs-on: windows-latest
    env:
      INSTALL_PATH: "$env:LOCALAPPDATA"
      SDK_NAME : "sensing-dev"
      VERSION : ${{ matrix.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Test help
        working-directory: installer\tools
        run: |          
          Get-Help .\installer.ps1 -full
  
      - name: Check installations 
        working-directory: installer\tools
        run: |
          try { 
              Get-Package sensing-dev            
              Write-Error "Package exists" 
            } 
          catch { 
              Write-Host $_
            }
  
      - name: Installation 
        working-directory: installer\tools
        run: |
          Write-Host "USERNAME = $env:USERNAME"
          powershell.exe -ExecutionPolicy Bypass -File .\installer.ps1 ${{ matrix.options }}          
  
      - name: Test Env instaltion  
        working-directory: installer\tools          
        run: |
          $expected_install_path = Join-Path -Path "${{ env.INSTALL_PATH }}" -ChildPath "${{ env.SDK_NAME }}"
          Write-Host "expected_install_path : $expected_install_path"
          $GST_PLUGIN_PATH =  [Environment]::GetEnvironmentVariable("GST_PLUGIN_PATH", "User")
          Write-Host GST_PLUGIN_PATH = $GST_PLUGIN_PATH
          if(${expected_install_path} -eq ${GST_PLUGIN_PATH}){
            $env:GST_PLUGIN_PATH=${GST_PLUGIN_PATH}
          }
          else {
            Write-Error "env:GST_PLUGIN_PATH required environment variable are not set"
          }
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          Write-Host SENSING_DEV_ROOT = $SENSING_DEV_ROOT
          if(${expected_install_path} -eq ${SENSING_DEV_ROOT}){
            $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT}
          }
          else {
            Write-Error "env:SENSING_DEV_ROOT required environment variable are not set"
          }
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          Write-Host PATH = $PATH
          $BinPATH = Join-Path -Path "$expected_install_path" -ChildPath "bin"
          if($PATH -split ";" -contains $BinPATH)
          {
            $env:PATH="$env:PATH;$PATH"
          }
          else {
            Write-Error "env:PATH Does not contain '$BinPATH'"
          }
          $PYTHONPATH= [Environment]::GetEnvironmentVariable("PYTHONPATH", "User")
          Write-Host PYTHONPATH = $PYTHONPATH
          $newPythonPath = Join-Path -Path "$expected_install_path" -ChildPath "lib\site-packages"
          if($PYTHONPATH -split ";" -contains $newPythonPath)
          {
            $env:PYTHONPATH="$env:PYTHONPATH;$PYTHONPATH"
          }
          else {
            Write-Error "env:PYTHONPATH Does not contain '$newPythonPath'"
          }
  
      - name: Test files instaltion  
        working-directory: installer\tools          
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT}
          tree $env:SENSING_DEV_ROOT /a
          echo "::group::bin"
          tree $env:SENSING_DEV_ROOT/bin /f /a
          echo "::endgroup::"
          echo "::group::include"
          tree $env:SENSING_DEV_ROOT/include /f /a
          echo "::endgroup::"
          echo "::group::lib"
          tree $env:SENSING_DEV_ROOT/lib /f /a
          echo "::endgroup::"
          echo "::group::license"
          tree $env:SENSING_DEV_ROOT/license /f /a
          echo "::endgroup::"
          echo "::group::share"
          tree $env:SENSING_DEV_ROOT/share /f /a
          echo "::endgroup::"
          echo "::group::tools"
          tree $env:SENSING_DEV_ROOT/tools /f /a
          echo "::endgroup::"
          
      - name: Test installation arv-tool
        run: |
          $PATH =  [Environment]::GetEnvironmentVariable("PATH", "User")
          Write-Host PATH = $PATH        
          $env:PATH="$env:PATH;$PATH"
          & arv-tool-0.8.exe
  
      - name: Uninstallation
        working-directory: installer\tools
        run: |
          $SENSING_DEV_ROOT= [Environment]::GetEnvironmentVariable("SENSING_DEV_ROOT", "User")
          $env:SENSING_DEV_ROOT=${SENSING_DEV_ROOT}
          Remove-Item "$env:SENSING_DEV_ROOT" -Recurse -Force

  





